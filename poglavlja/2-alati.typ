= CI/CD алати

Развој софтвера данас захтева брзу и поуздану испоруку нових верзија. Због тога су настали бројни CI/CD алати који аутоматизују процес изградње, тестирања и постављања апликације. Њихов циљ је да открију грешке у раној фази и омогуће континуирани развој.

== _Jenkins_

_Jenkins_ је један од најраспрострањенијих CI/CD алата отвореног кода. Његова архитектура се заснива на _Master-Agent_ моделу. У овом моделу _Master_ управља извршавањем послова и распоређује их на _Agent-е_. _Agent-и_ могу бити покренути локално или на удаљеним серверима.

_Agent-и_ извршавају задатке као што су компилација, тестирање и деплој апликације. Оваква архитектура омогућава расподелу оптерећења и паралелно извршавање послова. Тиме се побољшавају перформансе и скалабилност система.

Комуникација између _Master-а_ и _Agent-а_ у _Jenkins-у_ се одвија преко _Java Network Launch Protocol_ (JNLP) или SSH протокола. JNLP омогућава покретање _Agent-а_ као _Java Web Start_ апликације. SSH протокол се користи за удаљене _Agent-е_ и омогућава сигурнију везу.
 
Предности _Jenkins-а_ су велика флексибилност и подршка за више од хиљаду _plugin-а_. Мане су сложено одржавање, ручна конфигурација и потреба за добрим познавањем система. Безбедност зависи од спољних додатака и често захтева додатну конфигурацију.

== _GitHub Actions_

_GitHub Actions_ је део _GitHub_ платформе и нуди интегрисано CI/CD решење. У овом систему не постоји класичан _Master-Agent_ однос. Уместо тога, користи се концепт _Runner-а_. Они представљају извршне јединице сличне _Agent-има_. _Runner-и_ самостално преузимају послове са GitHub сервера и извршавају их. Архитектура је једноставнија, али са мањом контролом над процесима.

_Runner-и_ могу бити _GitHub Hosted_ или _Self-Hosted_. _GitHub Hosted_ је _cloud_ инстанца коју обезбјеђује _GitHub_. _Master_ логика је имплицитно интегрисана у _GitHub_ платформу. Она управља оркестрацијом и надзором извршавања радних токова.

Радни токови се дефинишу у YAML датотекама унутар репозиторијума. Извршавање радних токова покреће се аутоматски на основу различитих догађаја. Најчешћи догађаји су _push_, _pull request_ или креирање новог издања. Сваки радни ток који се извршава на _GitHub Hosted_ окружењу покреће се у изолованом виртуелном окружењу. Оваквим приступом се повећава безбедност и стабилност извршавања.

Комуникација се одвија преко _HTTPS REST API-ја_. _Runner-и_ периодично шаљу захтеве ка _GitHub_ серверу и преузимају послове за извршавање. Овај приступ омогућава сигурну комуникацију, али захтева сталну конекцију.

Предност овог приступа је једноставна конфигурација и чврста интеграција са репозиторијумом кода. Мана је ограничена контрола над инфраструктуром и мања могућност прилагођавања сложеним системима.

== _GitLab_ CI/CD
_GitLab_ CI/CD интегрише читав _DevOps_ процес у једну платформу. Његова архитектура користи _Master-Agent_ модел. _GitLab Server_ има улогу _Master-а_, а _GitLab Runner_ делује као _Agent_. _Master_ управља дефинисаним радним током CI/CD процеса и шаље послове _Runner-има_.

_Runner-и_ могу бити локални, удаљени или у _Docker_ и _Kubernetes_ окружењу. Они преузимају посао од Master-а и извршавају задате кораке, као што су _build_, _test_ и _deploy_. Након завршетка рада, резултате враћају _Master-у_. Оваква архитектура омогућава истовремено извршавање више послова. Такође омогућава бољу контролу приступа и једноставније скалирање система.

Комуникација између _GitLab Server-а_ и _Runner-а_ одвија се преко HTTP(S) протокола. _Runner-и_ активно контактирају _GitLab Server_ преко API-ја и преузимају послове. Сва комуникација је шифрована путем TLS-а, што обезбјеђује сигурност података.

GitLab CI/CD је стабилан систем, али за велике пројекте захтева снажну инфраструктуру и пажљиво подешавање.